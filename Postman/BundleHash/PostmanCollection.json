{
  "info": {
    "_postman_id": "391d8817-bbaa-46d7-9408-a11c07d980f0",
    "name": "Blocks Bundle Hash",
    "description": "SIMBA Blocks Postman collection download allowing users to be able to get started with postman within seconds. Replicating the ease of use for authentication and token fetch similar to SIMBA Blocks' SDKs but via Postman/API calls.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "24470171"
  },
  "item": [
    {
      "name": "Files",
      "item": [
        {
          "name": "Upload Files",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const time_now = Math.floor(Date.now() / 1000);\r",
                  "\r",
                  "//If token expired or no token, get new token\r",
                  "if (!pm.environment.get(\"authtoken_expiration\") && pm.environment.get(\"authtoken_expiration\")<=time_now){\r",
                  "\r",
                  "//Encodes the client secret and secret id\r",
                  "const auth_token = 'Basic ' + btoa(pm.environment.get(\"secret\")+':'+pm.environment.get(\"secret_client_id\"));\r",
                  "\r",
                  "//Crafts the Post Request for a new auth token\r",
                  "const postRequest = {\r",
                  "    url: pm.environment.get(\"auth_url\"),\r",
                  "  method: 'POST',\r",
                  "  header: {\r",
                  "    'Content-Type': 'application/json',\r",
                  "    'X-Foo': 'bar',\r",
                  "    'Authorization': auth_token\r",
                  "  },\r",
                  "  body: {\r",
                  "    mode: 'urlencoded',\r",
                  "    urlencoded : [\r",
                  "        {key: 'grant_type', value: 'client_credentials'}\r",
                  "        ]\r",
                  "  }\r",
                  "};\r",
                  "\r",
                  "//Sends Post request and saves token response\r",
                  "pm.sendRequest(postRequest, function (err, response) {\r",
                  "    \r",
                  "    const res = response.json();\r",
                  "    const expire_time = (Math.floor(Date.now() / 1000)+res.expires_in-10);\r",
                  "\r",
                  "    //pm.environment.set(\"authtoken_expiration\",expire_time);\r",
                  "    pm.environment.set(\"authtoken\", res.access_token);\r",
                  "    console.log(\"New Authtoken Set\");\r",
                  "});\r",
                  "}\r",
                  "\r",
                  "//Random Eth address generation\r",
                  "const genRanHex = size => [...Array(size)].map(() => Math.floor(Math.random() * 16).toString(16)).join('');\r",
                  "let randEth1 = \"0x\"+genRanHex(40).toUpperCase();\r",
                  "let randEth2 = \"0x\"+genRanHex(40).toUpperCase();\r",
                  "let randEth3 = \"0x\"+genRanHex(40).toUpperCase();\r",
                  "pm.collectionVariables.set(\"randEth1\", randEth1);\r",
                  "pm.collectionVariables.set(\"randEth2\", randEth2);\r",
                  "pm.collectionVariables.set(\"randEth3\", randEth3);\r",
                  "\r",
                  "//Today's date UTC\r",
                  "var utc = new Date().toJSON().slice(0,10).replace(/-/g,'/');\r",
                  "pm.collectionVariables.set(\"todaydate\", utc);\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const res = pm.response.json();\r",
                  "\r",
                  "pm.collectionVariables.set(\"bundle_hash\",res.inputs._bundleHash);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "_files",
                  "type": "file",
                  "src": []
                },
                {
                  "key": "_files",
                  "type": "file",
                  "src": [],
                  "disabled": true
                },
                {
                  "key": "",
                  "type": "file",
                  "src": [],
                  "disabled": true
                }
              ]
            },
            "url": {
              "raw": "{{blocks_apps_base_url}}/{{app_name_1}}/contract/{{contract_name_1}}/file/",
              "host": ["{{blocks_apps_base_url}}"],
              "path": [
                "{{app_name_1}}",
                "contract",
                "{{contract_name_1}}",
                "file",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Transactions",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const time_now = Math.floor(Date.now() / 1000);\r",
                  "\r",
                  "//If token expired or no token, get new token\r",
                  "if (!pm.environment.get(\"authtoken_expiration\") && pm.environment.get(\"authtoken_expiration\")<=time_now){\r",
                  "\r",
                  "//Encodes the client secret and secret id\r",
                  "const auth_token = 'Basic ' + btoa(pm.environment.get(\"secret\")+':'+pm.environment.get(\"secret_client_id\"));\r",
                  "\r",
                  "//Crafts the Post Request for a new auth token\r",
                  "const postRequest = {\r",
                  "    url: pm.environment.get(\"auth_url\"),\r",
                  "  method: 'POST',\r",
                  "  header: {\r",
                  "    'Content-Type': 'application/json',\r",
                  "    'X-Foo': 'bar',\r",
                  "    'Authorization': auth_token\r",
                  "  },\r",
                  "  body: {\r",
                  "    mode: 'urlencoded',\r",
                  "    urlencoded : [\r",
                  "        {key: 'grant_type', value: 'client_credentials'}\r",
                  "        ]\r",
                  "  }\r",
                  "};\r",
                  "\r",
                  "//Sends Post request and saves token response\r",
                  "pm.sendRequest(postRequest, function (err, response) {\r",
                  "    \r",
                  "    const res = response.json();\r",
                  "    const expire_time = (Math.floor(Date.now() / 1000)+res.expires_in-10);\r",
                  "\r",
                  "    //pm.environment.set(\"authtoken_expiration\",expire_time);\r",
                  "    pm.environment.set(\"authtoken\", res.access_token);\r",
                  "    console.log(\"New Authtoken Set\");\r",
                  "});\r",
                  "}\r",
                  "\r",
                  "//Random Eth address generation\r",
                  "const genRanHex = size => [...Array(size)].map(() => Math.floor(Math.random() * 16).toString(16)).join('');\r",
                  "let randEth1 = \"0x\"+genRanHex(40).toUpperCase();\r",
                  "let randEth2 = \"0x\"+genRanHex(40).toUpperCase();\r",
                  "let randEth3 = \"0x\"+genRanHex(40).toUpperCase();\r",
                  "pm.collectionVariables.set(\"randEth1\", randEth1);\r",
                  "pm.collectionVariables.set(\"randEth2\", randEth2);\r",
                  "pm.collectionVariables.set(\"randEth3\", randEth3);\r",
                  "\r",
                  "//Today's date UTC\r",
                  "var utc = new Date().toJSON().slice(0,10).replace(/-/g,'/');\r",
                  "pm.collectionVariables.set(\"todaydate\", utc);\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{blocks_apps_base_url}}/{{app_name_1}}/contract/{{contract_name_1}}/file/",
              "host": ["{{blocks_apps_base_url}}"],
              "path": [
                "{{app_name_1}}",
                "contract",
                "{{contract_name_1}}",
                "file",
                ""
              ]
            }
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [""]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [""]
          }
        }
      ]
    },
    {
      "name": "Files + One Input",
      "item": [
        {
          "name": "Upload Files",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const time_now = Math.floor(Date.now() / 1000);\r",
                  "\r",
                  "//If token expired or no token, get new token\r",
                  "if (!pm.environment.get(\"authtoken_expiration\") && pm.environment.get(\"authtoken_expiration\")<=time_now){\r",
                  "\r",
                  "//Encodes the client secret and secret id\r",
                  "const auth_token = 'Basic ' + btoa(pm.environment.get(\"secret\")+':'+pm.environment.get(\"secret_client_id\"));\r",
                  "\r",
                  "//Crafts the Post Request for a new auth token\r",
                  "const postRequest = {\r",
                  "    url: pm.environment.get(\"auth_url\"),\r",
                  "  method: 'POST',\r",
                  "  header: {\r",
                  "    'Content-Type': 'application/json',\r",
                  "    'X-Foo': 'bar',\r",
                  "    'Authorization': auth_token\r",
                  "  },\r",
                  "  body: {\r",
                  "    mode: 'urlencoded',\r",
                  "    urlencoded : [\r",
                  "        {key: 'grant_type', value: 'client_credentials'}\r",
                  "        ]\r",
                  "  }\r",
                  "};\r",
                  "\r",
                  "//Sends Post request and saves token response\r",
                  "pm.sendRequest(postRequest, function (err, response) {\r",
                  "    \r",
                  "    const res = response.json();\r",
                  "    const expire_time = (Math.floor(Date.now() / 1000)+res.expires_in-10);\r",
                  "\r",
                  "    //pm.environment.set(\"authtoken_expiration\",expire_time);\r",
                  "    pm.environment.set(\"authtoken\", res.access_token);\r",
                  "    console.log(\"New Authtoken Set\");\r",
                  "});\r",
                  "}\r",
                  "\r",
                  "//Random Eth address generation\r",
                  "const genRanHex = size => [...Array(size)].map(() => Math.floor(Math.random() * 16).toString(16)).join('');\r",
                  "let randEth1 = \"0x\"+genRanHex(40).toUpperCase();\r",
                  "let randEth2 = \"0x\"+genRanHex(40).toUpperCase();\r",
                  "let randEth3 = \"0x\"+genRanHex(40).toUpperCase();\r",
                  "pm.collectionVariables.set(\"randEth1\", randEth1);\r",
                  "pm.collectionVariables.set(\"randEth2\", randEth2);\r",
                  "pm.collectionVariables.set(\"randEth3\", randEth3);\r",
                  "\r",
                  "//Today's date UTC\r",
                  "var utc = new Date().toJSON().slice(0,10).replace(/-/g,'/');\r",
                  "pm.collectionVariables.set(\"todaydate\", utc);\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const res = pm.response.json();\r",
                  "\r",
                  "pm.collectionVariables.set(\"bundle_hash\",res.inputs._bundleHash);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "_files",
                  "type": "file",
                  "src": []
                },
                {
                  "key": "_files",
                  "type": "file",
                  "src": []
                },
                {
                  "key": "input",
                  "value": "Test123",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{blocks_apps_base_url}}/{{app_name_1}}/contract/{{contract_name_1}}/fileAndInput/",
              "host": ["{{blocks_apps_base_url}}"],
              "path": [
                "{{app_name_1}}",
                "contract",
                "{{contract_name_1}}",
                "fileAndInput",
                ""
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Transactions",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const time_now = Math.floor(Date.now() / 1000);\r",
                  "\r",
                  "//If token expired or no token, get new token\r",
                  "if (!pm.environment.get(\"authtoken_expiration\") && pm.environment.get(\"authtoken_expiration\")<=time_now){\r",
                  "\r",
                  "//Encodes the client secret and secret id\r",
                  "const auth_token = 'Basic ' + btoa(pm.environment.get(\"secret\")+':'+pm.environment.get(\"secret_client_id\"));\r",
                  "\r",
                  "//Crafts the Post Request for a new auth token\r",
                  "const postRequest = {\r",
                  "    url: pm.environment.get(\"auth_url\"),\r",
                  "  method: 'POST',\r",
                  "  header: {\r",
                  "    'Content-Type': 'application/json',\r",
                  "    'X-Foo': 'bar',\r",
                  "    'Authorization': auth_token\r",
                  "  },\r",
                  "  body: {\r",
                  "    mode: 'urlencoded',\r",
                  "    urlencoded : [\r",
                  "        {key: 'grant_type', value: 'client_credentials'}\r",
                  "        ]\r",
                  "  }\r",
                  "};\r",
                  "\r",
                  "//Sends Post request and saves token response\r",
                  "pm.sendRequest(postRequest, function (err, response) {\r",
                  "    \r",
                  "    const res = response.json();\r",
                  "    const expire_time = (Math.floor(Date.now() / 1000)+res.expires_in-10);\r",
                  "\r",
                  "    //pm.environment.set(\"authtoken_expiration\",expire_time);\r",
                  "    pm.environment.set(\"authtoken\", res.access_token);\r",
                  "    console.log(\"New Authtoken Set\");\r",
                  "});\r",
                  "}\r",
                  "\r",
                  "//Random Eth address generation\r",
                  "const genRanHex = size => [...Array(size)].map(() => Math.floor(Math.random() * 16).toString(16)).join('');\r",
                  "let randEth1 = \"0x\"+genRanHex(40).toUpperCase();\r",
                  "let randEth2 = \"0x\"+genRanHex(40).toUpperCase();\r",
                  "let randEth3 = \"0x\"+genRanHex(40).toUpperCase();\r",
                  "pm.collectionVariables.set(\"randEth1\", randEth1);\r",
                  "pm.collectionVariables.set(\"randEth2\", randEth2);\r",
                  "pm.collectionVariables.set(\"randEth3\", randEth3);\r",
                  "\r",
                  "//Today's date UTC\r",
                  "var utc = new Date().toJSON().slice(0,10).replace(/-/g,'/');\r",
                  "pm.collectionVariables.set(\"todaydate\", utc);\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{blocks_apps_base_url}}/{{app_name_1}}/contract/{{contract_name_1}}/fileAndInput/",
              "host": ["{{blocks_apps_base_url}}"],
              "path": [
                "{{app_name_1}}",
                "contract",
                "{{contract_name_1}}",
                "fileAndInput",
                ""
              ]
            }
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [""]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [""]
          }
        }
      ]
    },
    {
      "name": "GET Files",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const time_now = Math.floor(Date.now() / 1000);\r",
              "\r",
              "//If token expired or no token, get new token\r",
              "if (!pm.environment.get(\"authtoken_expiration\") && pm.environment.get(\"authtoken_expiration\")<=time_now){\r",
              "\r",
              "//Encodes the client secret and secret id\r",
              "const auth_token = 'Basic ' + btoa(pm.environment.get(\"secret\")+':'+pm.environment.get(\"secret_client_id\"));\r",
              "\r",
              "//Crafts the Post Request for a new auth token\r",
              "const postRequest = {\r",
              "    url: pm.environment.get(\"auth_url\"),\r",
              "  method: 'POST',\r",
              "  header: {\r",
              "    'Content-Type': 'application/json',\r",
              "    'X-Foo': 'bar',\r",
              "    'Authorization': auth_token\r",
              "  },\r",
              "  body: {\r",
              "    mode: 'urlencoded',\r",
              "    urlencoded : [\r",
              "        {key: 'grant_type', value: 'client_credentials'}\r",
              "        ]\r",
              "  }\r",
              "};\r",
              "\r",
              "//Sends Post request and saves token response\r",
              "pm.sendRequest(postRequest, function (err, response) {\r",
              "    \r",
              "    const res = response.json();\r",
              "    const expire_time = (Math.floor(Date.now() / 1000)+res.expires_in-10);\r",
              "\r",
              "    pm.environment.set(\"authtoken_expiration\",expire_time);\r",
              "    pm.environment.set(\"authtoken\", res.access_token);\r",
              "    console.log(\"New Authtoken Set\");\r",
              "});\r",
              "}\r",
              "\r",
              "//Random Eth address generation\r",
              "const genRanHex = size => [...Array(size)].map(() => Math.floor(Math.random() * 16).toString(16)).join('');\r",
              "let randEth1 = \"0x\"+genRanHex(40).toUpperCase();\r",
              "let randEth2 = \"0x\"+genRanHex(40).toUpperCase();\r",
              "let randEth3 = \"0x\"+genRanHex(40).toUpperCase();\r",
              "pm.collectionVariables.set(\"randEth1\", randEth1);\r",
              "pm.collectionVariables.set(\"randEth2\", randEth2);\r",
              "pm.collectionVariables.set(\"randEth3\", randEth3);\r",
              "\r",
              "//Today's date UTC\r",
              "var utc = new Date().toJSON().slice(0,10).replace(/-/g,'/');\r",
              "pm.collectionVariables.set(\"todaydate\", utc);\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{blocks_apps_base_url}}/{{app_name_1}}/contract/{{contract_name_1}}/bundle/{{bundle_hash}}",
          "host": ["{{blocks_apps_base_url}}"],
          "path": [
            "{{app_name_1}}",
            "contract",
            "{{contract_name_1}}",
            "bundle",
            "{{bundle_hash}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get Auth Token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const res = pm.response.json();\r",
              "const expire_time = (Math.floor(Date.now() / 1000)+res.expires_in-10);\r",
              "\r",
              "pm.environment.set(\"authtoken\",res.access_token);\r",
              "pm.environment.set(\"authtoken_expiration\",expire_time);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "basic",
          "basic": [
            {
              "key": "password",
              "value": "{{secret_client_id}}",
              "type": "string"
            },
            {
              "key": "username",
              "value": "{{secret}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "grant_type",
              "value": "client_credentials",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{auth_url}}",
          "host": ["{{auth_url}}"]
        }
      },
      "response": []
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authtoken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "contract_name_1",
      "value": ""
    },
    {
      "key": "app_name_1",
      "value": ""
    },
    {
      "key": "bundle_hash",
      "value": "",
      "type": "string"
    },
    {
      "key": "todaydate",
      "value": ""
    },
    {
      "key": "randEth1",
      "value": ""
    },
    {
      "key": "randEth2",
      "value": ""
    },
    {
      "key": "randEth3",
      "value": ""
    }
  ]
}
